// CHECK - Add Keystrokes count// - Grading should be done based on keystrokes. This will allow the copy-paste// - The notice at the top should be a slide-down slide-under. If there's none, it slides down. Otherwise a new notice slides out from the one immediately above it.// - the test parameters shouldn't need to be wrapped in [ ]// - Add timer// - Replace save system with much more powerful web Sql one.// - Use promises to power web sql queries.// - Implement load system// - Implement modal load dialog here. http://twitter.github.io/bootstrap/javascript.html// - Have multiple text windows open at once? Closable separately?oken// - Need new frame button// - better gui on the unit tests. If params aren't parse-able then make the params box red.// - Same for the other 3.// - Unit tests should remind semi-valid semi-json (e.g. ['aa']) to valid json ["aa"] with note// - need to be able to rename frames and have it save back// - need error log message when unit tests fail, plus a test # so tracking can be done// - need vertical scrolling on load dialog// - running a test that just failed, and seeing the fail icon still (no change) makes it difficult to know that anything has changed// - pressing enter on click-to-edit must submit, pressing escape must cancel// - Consolidate button UI. One class, and (that is, hover state, and mouse-down reaction) [see the link provided]// right now, view buttons on previous steps do nothing. Instead open a read-only window of it, no rename, focus it// [check] A) Make view button open a window and focus// [check] B) Make support for read-only windows// BUG: XSS on load dialog// Bug: I broke scoring// Refactor: Improve automatedTest.run 's dependence on externalities// don't show "Saved" on a read-only. Plus it probably is saving and updating the timestamp, so don't allow that either.// Bug: (caused by renaming sql field) I shouldn't be able to view multiple copies of a read-only... it should just open the existing one.// Need a default Icon// missing a column in "load saves" table// line wrap option on code mirror?// Bug: Pick a save dialog malfunctions with only 1 save//  Start a new database (incognito mode). Notice the default text comes without a tab (!). Shouldn't be able to enter text//    when there is no tab. Maybe read-only it, or auto-create a new tab.//  Also notice that when you save this unnamed tags, the title is saving incorrectly.////////////////////////////// @maybe do later if I am feeling OCD// Kinda working -- if I hit save 5 times it should have no effect. Saves should overwrite by default, or hide the former.// however, now I can open multiple copies of the same save... Is that really bad, what if I alter a save, don't change it, and want to load the original?// Also I feel like names should be unique. This difference from an operating system is confusing.-- Dude fuck all these edge cases man. Nobody cares about this. I don't know how word even handles all of these variants.-- Okay. So let's leave it as is.// Preserve all state. Nothing should be lost on a refresh.// Let's list all inherent "State"...// -- View state (dialogs up [intro, load], collapses,)// -- All open tabs, and their current values// -- Auto-save on navigate-away by using a handler!-- Dude fuck this for now.// saves is super-polluted. What I propose is that save by default "overwrite" which means "delete" the old (flag). We then have a// a view switch to "show deleted / overwritten". (Done: Saves can then be "deleted" with right-click). Or undeleted.// need to make the dev-console the default output window.// write grading////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// @todo -- below// make 2nd challenge// poker hands?// l1 - 5 cards is there a "pair" (or 3 or more of the same)// l2 - 5 cards, is there 2 pair// l3 - 5 cards, is there a flush// l4 - 5 cards, make all functions work with objects that represent cards// dogfood it// needs to work better on laptop, code window too tall// make better gui for results (gold / silver / bronze. Store results in local storage, etc)// pause when window loses focus on easier difficulties. Will make game more friendly and less threatening to newbies.INFO ON A TRUE SOLUTION with ME [having already solved this at least 5 times in the past]:- step 1 20:05, 1031 chars- step 2 10:06,  420 chars- step 3 16:09,  322 chars- step 4 5:35,   390 chars- step 5 9:32,   151 charsTOTAL:    1hr,  2312 charsFailed submissions: 4Resulting lines of code: 39 [excludes empty lines, includes lines with only a brace] -- Also, I'm the only one who knows about fancy... so... imagine how much harder that must be.// Scoring for Mixology-- at all - Bronze-- Silver - 2 hours - < 5000 chars-- Gold - 1 hour - < 2600 chars// On completion it shows stats, (maybe allows leaderboard), maybe allows a share link,  and perhaps auto-quits.// explain the ability to debug tests(Put a help Icon by each piece)// Note for:// -- Not chrome// -- Console not open// need a collapse for bottom?// animation on correct or wrong, and every attempted action// make overlay// make transition between steps better. Just unmasking question marks does not indicate a transition sufficiently.// Give a default test for every challenge for clarity? Tests need to be more readable and resizing needs to allow more than two sizes////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// @ not highest priority// all this needs to be namespaced & wrapped so user javascript can't mess with it.// I seem to have made some progress here...//   -- dom manipulation ?//          document.write ...//   -- They can still manipulate dom Via $ ... which I guess is okay? Unless I import a pseudo-jquery via wrapping it in a closure...//   -- Window.* , document.*//   -- take my solutions and such out of the global scope// need to put mapToReduce and mapToMap in fancy for now// need to be able to resize frames better// Actually, No. No. Don't need this: Perhaps instead of windows being tied to editors, windows are just "frames" which can be Unit Tests, editors, consoles.//      And unit-tests could be tied to any window, as could consoles be tied to any unit test.//      this could also resolve saving questions [save frame would save unit-test + console + whatever]// Bugs://  -  keytyping count needs to be tied to window! If I discard a type in a window and discard it, this shouldn't affect my total in another window.//  -  should keystrokes be per-window? Are they saved?// Refactor challengeSteps//  When in parse mode (just extracting function names but not running any test)//      - Debugger activates//      - alert does a console log, which should not happen. No side effects should happen at all.// Saving questions// -- Saving just editor//  -- Unit tests? (if so, is load a merge?)//  -- Records of keystrokes, etc?// move pseudo console to the right... save this to last because it may become irrelevant on graphical redesign// Intro needs to hide cleanly. When closed intro needs to hide forever by default// Goes into what I've currently made... which then needs a way to quit back out. (escape, etc) and a good way to retrieve it.// Big Picture: Startup interface//      [Check] Name, author, what is this//      [] choose challenge (use known state to resume appropriately)// App should start with fading splash screen as it loads, not FLASHING.