INFO ON A TRUE SOLUTION with ME [having already solved this at least 5 times in the past]:- step 1 20:05, 1031 chars- step 2 10:06,  420 chars- step 3 16:09,  322 chars- step 4 5:35,   390 chars- step 5 9:32,   151 charsTOTAL:    1hr,  2312 charsFailed submissions: 4Resulting lines of code: 39 [excludes empty lines, includes lines with only a brace] -- Also, I'm the only one who knows about fancy... so... imagine how much harder that must be.// Scoring for Mixology-- at all - Bronze-- Silver - 2 hours - < 5000 chars-- Gold - 1 hour - < 2600 chars// Scoring for dates- step 1 1:00 - 154 chars- step 2 1:20 - 156 chars- step 3 5:09 - 308 chars- step 4 7:48 - 743 charsTotal - 15:20 - 1350 chars- at all - Bronze- Silver < 45 minutes < 3000 chars- Gold < 22 minutes < 1900 chars////////////////////////////// @maybe do later if I am feeling OCD// Flow: Refreshing the page shouldn't destroy state.// Preserve all state. Nothing should be lost on a refresh.// Let's list all inherent "State"...// -- View state (dialogs up [intro, load], collapses,)// -- All open tabs, and their current values// -- Auto-save on navigate-away by using a handler!// need to make the dev-console the default output window.// ?? Scores don't immediately show up due to race condition... force refresh on changing angular variable or use function?   Then force refresh on completion of challenge?// If there are any scores hide "Recommended challenge"// Resizing needs to allow more than two sizes// however, now I can open multiple copies of the same save... Is that really bad, what if I alter a save, don't change it, and want to load the original?// Also I feel like (save) names should be unique. This difference from an operating system is confusing.////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// @todo -- below ++ So.... what decisions can I make?  - By default only show loads from this same "Session"// need a way to view scoring on a particular challengeI need a basic tutorial. It's not clear you can throw debugger into the window for example.This should be of the form of a "educational" test. Should basically include:- Write a function to return the number 2- write a function to determine if a number is negative.- write a function add two numbers-- Then should show helpful popup boxes-- Explain tests-- explain debug-- Explain bringing up the console-- I need an overlay to point out where stuff is.-- Explain auto-pausing and suchCSS:I can't make tests if the window isn't wide enough... I need to make a window scrollbar if the window go below my "Min size"Even if the window is full width sometimes tests fail// dogfood it// Note for:// -- Not chrome// -- Console not open// need a collapse for bottom?// needs to work better on laptop, code window too tall// animation on correct or wrong, and every attempted action// On completion it shows stats, (maybe allows leaderboard), maybe allows a share link,  and perhaps auto-quits.// explain the ability to debug tests(Put a help Icon by each piece)// make overlay// make transition between steps better. Just unmasking question marks does not indicate a transition sufficiently.// concept of resuming a save? Like, right now if I do two steps in a challenge and leave can I really resume? Do I care?// are saves just source files or states?Tests need to be more readablemove rekey into fancy// Recenter pause screenMaybe show grading standards before starting the challenge////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// @ not highest priority// Bugs://  -  keytyping count needs to be tied to window! If I discard a type in a window and discard it, this shouldn't affect my total in another window.//  -  should keystrokes be per-window? Are they saved?// only pause if a challenge is running... otherwise it's confusing.//ability to chose comparison function? Or something?// need to put mapToReduce and mapToMap in fancy for now// need to be able to resize frames better// all this needs to be namespaced & wrapped so user javascript can't mess with it.// I seem to have made some progress here...//   -- dom manipulation ?//          document.write ...//   -- They can still manipulate dom Via $ ... which I guess is okay? Unless I import a pseudo-jquery via wrapping it in a closure...//   -- Window.* , document.*//   -- take my solutions and such out of the global scope// Actually, No. No. Don't need this: Perhaps instead of windows being tied to editors, windows are just "frames" which can be Unit Tests, editors, consoles.//      And unit-tests could be tied to any window, as could consoles be tied to any unit test.//      this could also resolve saving questions [save frame would save unit-test + console + whatever]// new challenge idea -- implement more powerful string manipulation (e.g. substr with negative indexes and sprintf? )// New challenge idea -- something around inconsistent functions (e.g. my FTP code?)// New challenge idea -- mock file system (too big!)// New challenge idea --// App should start with fading splash screen as it loads, not FLASHING.// animate everything. 0 discontinuity.// Big Picture: Startup interface//      [Check] Name, author, what is this//      [] choose challenge (use known state to resume appropriately)BUGS://  When in parse mode (just extracting function names but not running any test)//      - Debugger activates//      - alert does a console log, which should not happen. No side effects should happen at all.// Saving questions// -- Saving just editor//  -- Unit tests? (if so, is load a merge?)//  -- Records of keystrokes, etc?// move pseudo console to the right... save this to last because it may become irrelevant on graphical redesign// Intro needs to hide cleanly. When closed intro needs to hide forever by default// Goes into what I've currently made... which then needs a way to quit back out. (escape, etc) and a good way to retrieve it.